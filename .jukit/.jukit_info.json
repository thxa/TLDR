{"cmd": "\n# Include necessary CSS for the hover-based dropdown\ncss = \"\"\"\n<style>\n    .invoice-container {\n        position: relative;\n        display: inline-block;\n    }\n    .invoice-button {\n        padding: 5px 10px;\n        background-color: #f0f0f0;\n        border: 1px solid #ccc;\n        cursor: pointer;\n    }\n    .dropdown-menu {\n        display: none;\n        position: absolute;\n        background-color: #f9f9f9;\n        min-width: 160px;\n        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n        z-index: 1;\n    }\n    .dropdown-menu ul {\n        list-style-type: none;\n        padding: 0;\n        margin: 0;\n    }\n    .dropdown-menu li {\n        padding: 8px 12px;\n    }\n    .invoice-container:hover .dropdown-menu {\n        display: block;\n    }\n</style>\n\"\"\"\n\n\n\ndef create_row_html_with_dropdown(key, invoice_id, invoice_items):\n    # Create list items for each product in the invoice\n    items_html = \"\".join(\n        # f\"<li>{item[2]}: {product[product.columns[8]]} x {product[product.columns[9]]}</li>\"\n        f\"<li> : Hello world</li>\"\n        for item in invoice_items.values\n    )\n    \n    # Construct the dropdown container with hover functionality\n    dropdown_html = f\"\"\"\n    <div class=\"invoice-container\">\n        <div class=\"invoice-button\">{invoice_id}</div>\n        <div class=\"dropdown-menu\">\n            <ul>\n                {items_html}\n            </ul>\n        </div>\n    </div>\n    \"\"\"\n    \n\n    \n    return f\"\"\"<tr><th>{key}</th><td>{dropdown_html}</td></tr>\"\"\"\n\n\ndef create_row_with_cols_html(key, *args):\n    html = f\"\"\"<tr><th>{key}</th>\"\"\"\n    for arg in args:\n        html += f\"<td>{arg}</td>\"\n    html += \"</tr>\"\n    return html\n\n\ndef create_row_html(key, value):\n    return f\"\"\"<tr><th>{key}</th><td>{value}</td></tr>\"\"\"\n\n\ndef create_popup_html(row):\n\n    invoices = get_invoices(row[\"customerNo\"])\n    inv_len = len(invoices)\n    rows = []\n\n    for invoice in invoices:\n        invoice_id = invoice[0]\n        invoice_items = invoice[1]\n        rows.append(create_row_html(\"invoice_id\", invoice_id))\n\n        invoice_area = 0\n        fit_on_truck = 0\n        for item in invoice_items.values:\n            item_data = product[item[2] == product[product.columns[0]]]\n            item_l_w = item_data[[product.columns[8], product.columns[9]]].values[0]\n\n            invoice_area += item_l_w[0] * item_l_w[1]\n            # fit_on_truck += 12000 / (item_l_w[0] * item_l_w[1])\n\n        rows.append(create_row_html(\"Invoice area\", invoice_area))\n        rows.append(create_row_html(\"Invoice items fit in truck\", 12000/invoice_area))\n        # rows.append(create_row_html(\"Invoice items fit in truck # in loop\", fit_on_truck))\n\n\n\n    rows_t = \"\".join(rows)\n    html_content = f\"\"\"\n    <div style=\"max-height:200px; overflow-y:auto;\">\n        <table style=\"width:250px\">\n            <tr><th>Customer No</th><td>{row['customerNo']}</td></tr>\n            <tr><th>Latitude</th><td>{row['Latitude']}</td></tr>\n            <tr><th>Longitude</th><td>{row['Longitude']}</td></tr>\n            <tr><th>Invoices counts</th><td>{inv_len}</td></tr>\n            {rows_t}\n            \n        </table>\n    </div>\n    \"\"\"\n    return folium.Popup(html_content, max_width=300)\n\n\n# Convert latitude and longitude to radians for haversine distance calculation\ncoords = np.radians(customer[['Latitude', 'Longitude']])\n\n# Set the maximum distance (in kilometers) for clustering\neps_km = 4  # Adjust this value to set the clustering range in kilometers\n\n# Earth radius in kilometers\nearth_radius_km = 6371.0\n\n# Perform DBSCAN clustering\ndb = DBSCAN(eps=eps_km / earth_radius_km, min_samples=2, metric='haversine').fit(coords)\ncustomer['Cluster'] = db.labels_\n\n# Create a folium map centered around the average location\ncenter_lat = customer['Latitude'].mean()\ncenter_lon = customer['Longitude'].mean()\nmap_clusters = folium.Map(location=[center_lat, center_lon], zoom_start=11, tiles='OpenStreetMap')\n\n# Define colors for clusters\ncolors = ['red', 'blue', 'green', 'purple', 'orange', 'darkred', 'lightred', 'beige', 'darkblue', 'darkgreen', 'cadetblue', 'darkpurple', 'pink', 'lightblue', 'lightgreen']\n\n# Add customer markers to the map, color-coded by cluster\nfor _, row in customer.iterrows():\n    cluster_id = row['Cluster']\n    color = 'gray' if cluster_id == -1 else colors[cluster_id % len(colors)]  # Use gray for noise points (cluster ID -1)\n\n    # inv_cnts = len(get_invoices(row[\"customerNo\"]))\n    # print(list(inv_cnts)[0])\n\n    # popup=f'Customer No: {row[\"customerNo\"]}, <br/> Cluster: {cluster_id}, <br/> inv: {inv_cnts}',\n    folium.Marker(\n        location=[row['Latitude'], row['Longitude']],\n        popup=create_popup_html(row),\n        icon=folium.Icon(color=color, icon='info-sign')\n    ).add_to(map_clusters)\n\n\n# Add Esri World Imagery basemap\nesri_tiles = folium.TileLayer(\n    tiles='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n    attr='Esri',\n    name='Esri World Imagery',\n    overlay=True,\n    control=True\n)\n\nesri_tiles.add_to(map_clusters)\n\n# Add Google Maps tile layer (optional; this uses a plugin and does not need an API key)\nfolium.TileLayer('https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}', \n                 attr='Google', name='Google Maps', overlay=True).add_to(map_clusters)\n\n\n# Add layer control\nfolium.LayerControl().add_to(map_clusters)\n\n# Save the map to an HTML file\nmap_clusters.save('customer_clusters_map_km.html')\n", "cmd_opts": " --cell_id=YVQJRPqd5K -s", "import_complete": 1, "terminal": "nvimterm"}